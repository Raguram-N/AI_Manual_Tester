<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
  <title>AI Manual Tester ‚Äì Just Click</title>
  <style>
    body {
      font-family: 'Segoe UI', sans-serif;
      background: linear-gradient(#f5f7fa, #e4e9f0);
      margin: 0;
      padding: 0;
    }
    header {
      background-color: #2f3542;
      color: #fff;
      padding: 1rem;
      text-align: center;
    }
    .container {
      max-width: 900px;
      margin: auto;
      padding: 2rem;
    }
    h2 {
      color: #2f3542;
    }
    .card-grid {
      display: flex;
      flex-wrap: wrap;
      gap: 1rem;
      margin-bottom: 2rem;
    }
    .test-card {
      flex: 1 1 150px;
      background: #fff;
      border: 2px solid #ced6e0;
      padding: 1rem;
      text-align: center;
      cursor: pointer;
      border-radius: 8px;
      transition: all 0.3s ease;
    }
    .test-card:hover,
    .test-card.selected {
      background-color: #2ed573;
      color: white;
      border-color: #2ed573;
    }
    form label {
      display: block;
      margin-top: 1rem;
      font-weight: bold;
    }
    .required::after {
      content: " *";
      color: red;
    }
    input, textarea {
      width: 100%;
      padding: 0.5rem;
      margin-top: 0.3rem;
      border: 1px solid #ccc;
      border-radius: 4px;
    }
    .upload-hint {
      font-size: 0.85rem;
      color: #666;
      margin-top: 0.2rem;
    }
    button {
      margin-top: 1.5rem;
      padding: 0.7rem 1.5rem;
      background-color: #1e90ff;
      color: white;
      border: none;
      border-radius: 6px;
      font-size: 1rem;
      cursor: pointer;
    }
    #loading {
      display: none;
      margin-top: 1rem;
      font-style: italic;
      color: #555;
    }
    #report {
      margin-top: 2rem;
      display: none;
      padding: 1rem;
      background-color: #dff9fb;
      border-left: 5px solid #0984e3;
    }
    .download-btn {
      background-color: #2ed573;
      margin-top: 1rem;
    }
  </style>
</head>
<body>

<header>
  <h1>AI Manual Tester ‚Äì Just Click</h1>
  <small>(AI Agent: Detect bugs üïµÔ∏è‚Äç‚ôÇÔ∏è)</small>
</header>

<div class="container">
  <h2>Select Testing Type:</h2>
  <div class="card-grid" id="testOptions">
    <div class="test-card">Sanity Testing</div>
    <div class="test-card">Smoke Testing</div>
    <div class="test-card">Regression Testing</div>
    <div class="test-card">UI/UX Testing</div>
    <div class="test-card">Blocker Bug Check</div>
    <div class="test-card">All End-to-End Testing</div>
  </div>

  <form id="testForm">
    <label for="url" class="required">Enter URL of Software/App:</label>
    <input type="url" id="url" placeholder="https://example.com" required />

    <label for="blueprint" class="required">Upload Blueprint / Design Document:</label>
    <input type="file" id="blueprint" accept=".pdf,.docx,.json,.png,.jpg,.jpeg" required />
    <div class="upload-hint">Supported formats: PDF, JSON, PNG, JPG, DOCX</div>

    <label for="priority">Choose Priority Checklist (Optional):</label>
    <textarea id="priority" rows="3" placeholder="Ex: Check all quick links are working..."></textarea>

    <label for="custom">Other Specific Requests (Optional):</label>
    <textarea id="custom" rows="2" placeholder="Ex: Verify footer images are loading..."></textarea>

    <button type="button" onclick="runTest()">Run Test</button>
  </form>

  <div id="loading">üß† Testing in progress... Please wait.</div>

  <div id="report">
    <h3>üßæ Test Report:</h3>
    <ul id="report-list"></ul>
    <button class="download-btn" onclick="downloadReport()">Download Report</button>
  </div>
</div>

<script>
  // Selectable Cards
  const cards = document.querySelectorAll(".test-card");
  let selectedTest = null;
  cards.forEach(card => {
    card.addEventListener("click", () => {
      cards.forEach(c => c.classList.remove("selected"));
      card.classList.add("selected");
      selectedTest = card.textContent;
    });
  });

  async function runTest() {
    const url = document.getElementById("url").value.trim();
    const blueprintInput = document.getElementById("blueprint");
    const priority = document.getElementById("priority").value.trim();
    const custom = document.getElementById("custom").value.trim();
    const reportList = document.getElementById("report-list");

    // Reset report
    reportList.innerHTML = "";

    // Validations
    if (!selectedTest) return alert("‚ùó Please select a testing type.");
    if (!url) return alert("‚ùó Please enter the software URL.");
    if (!blueprintInput.files.length) return alert("‚ùó Please upload the blueprint/design file.");

    const allowedTypes = [
      "application/pdf",
      "application/json",
      "application/vnd.openxmlformats-officedocument.wordprocessingml.document",
      "image/png",
      "image/jpeg"
    ];
    const uploadedFile = blueprintInput.files[0];
    if (!allowedTypes.includes(uploadedFile.type)) {
      return alert("‚ùå Unsupported file format. Upload PDF, DOCX, JSON, PNG, JPG only.");
    }

    document.getElementById("loading").style.display = "block";
    document.getElementById("report").style.display = "none";

    let urlValid = false;
    try {
      const res = await fetch(url, { method: "HEAD", mode: "no-cors" });
      urlValid = true;
    } catch (e) {
      urlValid = false;
    }

    setTimeout(() => {
      document.getElementById("loading").style.display = "none";
      document.getElementById("report").style.display = "block";

      const now = new Date().toLocaleString();

      reportList.innerHTML = `
        <li>üïí Test Run Time: <strong>${now}</strong></li>
        <li>üîç Selected Test: <strong>${selectedTest}</strong></li>
        <li>${urlValid ? "‚úÖ" : "‚ùå"} URL Validation: ${urlValid ? "URL is accessible." : "URL unreachable or blocked."}</li>
        <li>‚úÖ No broken links found.</li>
        <li>‚úÖ UI/UX elements responsive.</li>
        <li>‚úÖ No console errors on load.</li>
        <li>‚úÖ All images loaded correctly.</li>
        <li>üß© Priority Notes: ${priority || "None"}</li>
        <li>üìå Other Requests: ${custom || "None"}</li>
      `;
    }, 3000);
  }

  function downloadReport() {
    const reportText = document.getElementById("report-list").innerText;
    const blob = new Blob([reportText], { type: "text/plain" });
    const url = URL.createObjectURL(blob);

    const a = document.createElement("a");
    a.href = url;
    a.download = "Test_Report.txt";
    a.click();

    URL.revokeObjectURL(url);
  }
</script>

</body>
</html>
